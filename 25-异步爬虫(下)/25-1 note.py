"""
并发量控制:
    async def --> 一个协程 --> 并发
    为了避免请求过多的情况，爬虫程序同时对服务器发起万级以上的请求，当服务器不能承受如此庞大的并发量时，可能
    导致服务器崩溃等负面状态->如果我们的爬虫程序把对方的服务器爬崩，可能就要白吃白喝不知道多少年
    控制并发量:
        -->一般情况下通过Semaphore -->asyncio


    aiohttp:-> 第三方包  安装：pip install aiohttp
        当async异步任务遇到同步操作时，异步任务会取消异步回到同步调用
        requests --> 同步操作的模块 --> 导致requests爬虫无法实现真正的异步
        aiohttp --> 基于asyncio实现的一个异步发起请求的模块 --> 可以用作爬虫--> 也可以用在后端开发(flask,django等)
        -->客户端(爬虫) 服务端(web后端开发)
        aiohttp.ClientSession()--> requests.session()
        -->异步任务--> 同一个事件循环
        在一个事件循环中不能再开启一个新的事件循环
"""